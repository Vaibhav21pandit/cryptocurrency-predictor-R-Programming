
library(ggplot2)
#ggplot(data = data,aes(x-))

library("anytime")
library("bsts")
library("car")
library("caret")
library("forecast")

#importing data

testdata <- test[,2]
#Converting data for analysis
train$Date <- as.Date(anytime(train$Date))
test$Date <- as.Date(anytime(test$Date))
train$Volume <- gsub(",", "", train$Volume)
train$Market.Cap <- gsub(",", "", train$Market.Cap)
train$Market.Cap <- as.numeric(train$Market.Cap)
train$Volume <- as.numeric(train$Volume)

#Difference between high and low on each day
a <- matrix(c(0), nrow = 0, ncol = 1)
for(i in 1:nrow(train)){
  a <- rbind(a, train[i,3] - train[i,4])
  i <- i + 1
}
train <- cbind(train,a)


#Volume has missing values#
#Data Manipulation#
fifty_avg <- round(mean(train$Volume[train$a < 50], na.rm = TRUE), digits = 2)
hun_avg <- round(mean(train$Volume[train$a > 50 & train$a < 100], na.rm = TRUE), digits = 2)
hf_avg <- round(mean(train$Volume[train$a > 100 & train$a < 150], na.rm = TRUE), digits = 2)
th_avg <- round(mean(train$Volume[train$a > 150 & train$a < 350], na.rm = TRUE), digits = 2)
for(i in 1:nrow(train)){
  if(is.na(train[i,6])){
    if(train$a[i] < 50){
      train$Volume[i] <- fifty_avg
    } else if(train$a[i] < 100){
      train$Volume[i] <- hun_avg
    } else if(train$a[i] < 150){
      train$Volume[i] <- hf_avg
    } else if(train$a[i] < 350){
      train$Volume[i] <- th_avg
    }else
      print("Uncaught Title")
  }
}
train <- train[, - 8] #Removing column 8
ggplot(train, aes(Date, Close)) + geom_line() + scale_x_date("year") + ylim(0,10000) + ylab("Closing Price")





#Convert data set to time series
Train <- xts(train[, -1], order.by = as.POSIXct(train$Date)) 
tsr <- ts(Train[,4], frequency = 365.25,start = c(2013,4,27))
plot(Train$Close,type='l',lwd = 1.5,col='red', ylim = c(0,10000),)

#checking for trends and seasonality
dects <- decompose(tsr) #Obtaining the trends and seasonality
plot(dects)

#ARIMA
tsdf <- diff(Train[,4], lag = 2) #The argument lag allows you to specify the lag.For example, if lag = 2, the differences between the third and the first value, between the fourth and the second value, between the fifth and the third value etc. are calculated.
tsdf <- tsdf[!is.na(tsdf)] #remove the not available data
adf.test(tsdf)  #dickey fuller test-if p-value is less than .05 then we reject the model.
plot(tsdf, type = 1, ylim = c(-1000, 1000))

#ACF AND PACF plots
acf(tsdf)
pacf(tsdf)

gege <- arima(Train[,4], order = c(4,2,11))
gegef <- as.data.frame(forecast(gege, h = 10))
accuracy(gegef[,1], testdata)
gegefct <- cbind(test, gegef[,1])
plot(forecast(gege, h = 10), ylim = c(0,10000))
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,2]), color = "blue") + geom_line(data = gegefct, aes(Date, gegefct[,3]), color = "Dark Red")


#baysian
ss <- AddLocalLinearTrend(list(), Train[,4]) #Adding linear trend to model
#ss <- AddSeasonal(ss, Train[,4], nseasons = 365.25) #Adding seasonal trend to model
model1 <- bsts(Train[,4],
               state.specification = ss,
               niter = 15)

plot(model1, ylim = c(0,10000)) #Plot based on bayesian regression of the model
pred1 <- predict(model1, horizon = 10, interval="confidence")
plot(pred1, plot.original = 50,ylim = c(0,9000))
pred1$mean
accuracy(pred1$mean, testdata)

#model2 <- bsts(Close ~ ., state.specification = ss,
 #              niter = 10,
  #             data = as.data.frame(Train))

model2 <- bsts(Train[,4],
               state.specification = ss,
               niter = 10)
pred2 <- predict(model2, horizon = 10)
plot(pred2, plot.original = 50,ylim = c(0,9000))
pred2$mean
accuracy(pred2$mean, testdata)


model3 <- bsts(Close ~ ., state.specification = ss,
               niter = 10,
               data = as.data.frame(Train),
               expected.model.size = 10)

pred3 <- predict(model3, horizon = 10)
plot(pred2, plot.original = 50,ylim = c(0,9000))
pred3$mean
accuracy(pred3$mean, testdata)

CompareBstsModels(list("Model 1" = model1, "Model 2" = model2, "Model 3" = model3), colors = c("blue", "red", "green"))
